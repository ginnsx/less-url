<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.xioshe.less.url.repository.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.github.xioshe.less.url.entity.User">
    <!--@mbg.generated-->
    <!--@Table lu_user-->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="level" jdbcType="TINYINT" property="level" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="integral" jdbcType="INTEGER" property="integral" />
    <result column="balance" jdbcType="DECIMAL" property="balance" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="deleted_key" jdbcType="BIGINT" property="deletedKey" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="api_key" jdbcType="VARCHAR" property="apiKey" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, `level`, username, integral, balance, `password`, `status`, deleted_key, email, 
    api_key, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from lu_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--@mbg.generated-->
    delete from lu_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.github.xioshe.less.url.entity.User" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into lu_user (`level`, username, integral, 
      balance, `password`, `status`, 
      deleted_key, email, api_key, 
      create_time, update_time)
    values (#{level,jdbcType=TINYINT}, #{username,jdbcType=VARCHAR}, #{integral,jdbcType=INTEGER}, 
      #{balance,jdbcType=DECIMAL}, #{password,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT}, 
      #{deletedKey,jdbcType=BIGINT}, #{email,jdbcType=VARCHAR}, #{apiKey,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.github.xioshe.less.url.entity.User" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into lu_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="level != null">
        `level`,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="integral != null">
        integral,
      </if>
      <if test="balance != null">
        balance,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="deletedKey != null">
        deleted_key,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="apiKey != null">
        api_key,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="level != null">
        #{level,jdbcType=TINYINT},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="integral != null">
        #{integral,jdbcType=INTEGER},
      </if>
      <if test="balance != null">
        #{balance,jdbcType=DECIMAL},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="deletedKey != null">
        #{deletedKey,jdbcType=BIGINT},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="apiKey != null">
        #{apiKey,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.xioshe.less.url.entity.User">
    <!--@mbg.generated-->
    update lu_user
    <set>
      <if test="level != null">
        `level` = #{level,jdbcType=TINYINT},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="integral != null">
        integral = #{integral,jdbcType=INTEGER},
      </if>
      <if test="balance != null">
        balance = #{balance,jdbcType=DECIMAL},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="deletedKey != null">
        deleted_key = #{deletedKey,jdbcType=BIGINT},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="apiKey != null">
        api_key = #{apiKey,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.xioshe.less.url.entity.User">
    <!--@mbg.generated-->
    update lu_user
    set `level` = #{level,jdbcType=TINYINT},
      username = #{username,jdbcType=VARCHAR},
      integral = #{integral,jdbcType=INTEGER},
      balance = #{balance,jdbcType=DECIMAL},
      `password` = #{password,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=TINYINT},
      deleted_key = #{deletedKey,jdbcType=BIGINT},
      email = #{email,jdbcType=VARCHAR},
      api_key = #{apiKey,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="findByUsername" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select
    <include refid="Base_Column_List" />
    from lu_user
    where username = #{username,jdbcType=VARCHAR}
  </select>
</mapper>