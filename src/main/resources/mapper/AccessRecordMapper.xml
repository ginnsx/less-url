<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.xioshe.less.url.repository.mapper.AccessRecordMapper">
  <resultMap id="BaseResultMap" type="com.github.xioshe.less.url.entity.AccessRecord">
    <!--@mbg.generated-->
    <!--@Table lu_access_records-->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="short_url" jdbcType="VARCHAR" property="shortUrl" />
    <result column="user_agent" jdbcType="VARCHAR" property="userAgent" />
    <result column="ip" jdbcType="VARCHAR" property="ip" />
    <result column="referer" jdbcType="VARCHAR" property="referer" />
    <result column="access_time" jdbcType="TIMESTAMP" property="accessTime" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, short_url, user_agent, ip, referer, access_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from lu_access_records
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--@mbg.generated-->
    delete from lu_access_records
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.github.xioshe.less.url.entity.AccessRecord" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into lu_access_records (short_url, user_agent, ip,
      referer, access_time)
    values (#{shortUrl,jdbcType=BIGINT}, #{userAgent,jdbcType=VARCHAR}, #{ip,jdbcType=VARCHAR},
      #{referer,jdbcType=VARCHAR}, #{accessTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.github.xioshe.less.url.entity.AccessRecord" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into lu_access_records
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="shortUrl != null">
        short_url,
      </if>
      <if test="userAgent != null">
        user_agent,
      </if>
      <if test="ip != null">
        ip,
      </if>
      <if test="referer != null">
        referer,
      </if>
      <if test="accessTime != null">
        access_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="shortUrl != null">
        #{shortUrl,jdbcType=BIGINT},
      </if>
      <if test="userAgent != null">
        #{userAgent,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="referer != null">
        #{referer,jdbcType=VARCHAR},
      </if>
      <if test="accessTime != null">
        #{accessTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.xioshe.less.url.entity.AccessRecord">
    <!--@mbg.generated-->
    update lu_access_records
    <set>
      <if test="shortUrl != null">
        short_url = #{shortUrl,jdbcType=BIGINT},
      </if>
      <if test="userAgent != null">
        user_agent = #{userAgent,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="referer != null">
        referer = #{referer,jdbcType=VARCHAR},
      </if>
      <if test="accessTime != null">
        access_time = #{accessTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.xioshe.less.url.entity.AccessRecord">
    <!--@mbg.generated-->
    update lu_access_records
    set short_url = #{shortUrl,jdbcType=BIGINT},
      user_agent = #{userAgent,jdbcType=VARCHAR},
      ip = #{ip,jdbcType=VARCHAR},
      referer = #{referer,jdbcType=VARCHAR},
      access_time = #{accessTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="countByShortUrl" resultType="int">
      select count(*)
      from lu_access_records
      where short_url = #{shortUrl}
  </select>
</mapper>